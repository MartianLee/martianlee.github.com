{"version":3,"file":"component---contents-posts-2017-01-29-blogging-tools-mdx-56763c15163b6b086849.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,mVAAoV,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,oUAAqU,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,wCAAyC,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CAC/8BK,UAAW,iBACV,sGAAuG,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,4CAA6C,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,mTAAoT,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,qCAAsCM,EAAAA,cAAoBT,EAAYM,EAAG,CAC/pBK,KAAM,+BACL,WAAY,KAAMF,EAAAA,cAAoBT,EAAYM,EAAG,CACtDK,KAAM,iCACL,OAAQ,KAAMF,EAAAA,cAAoBT,EAAYM,EAAG,CAClDK,KAAM,2BACL,cACL,CAKA,UAJA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWd,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCUO,MAAMe,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,CAGA,MAAMS,EAAc,CAAC,EAQd,SAASC,GAAY,WAACV,EAAU,SAAEW,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfZ,EACHA,EAAW,CAAC,GACZA,GAAcS,EAEJF,EAAiBP,GAG5B,gBACLM,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2017-01-29-blogging-tools.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"나는 글 쓰는 일을 좋아한다. 글은 내 생각을 표현하는 방식 중에서 전달할 때의 오해의 범위가 적고 시간과 장소, 도구의 제한을 많이 받지 않는 최고의 표현방식 중의 하나다. 글자를 처음 배웠을 때부터 일기라는 방식으로 우리는 '나의 글'을 써나가는 방법을 배운다. 그렇게 적힌 일기들은 일기장에 하나둘씩 모아진다. 그렇지만 우리나라에선 중학교에 올라간 뒤부터는 누구도 '쓰기'를 강제하지 않는다. 우리는 암기와 읽기에 편중된 교육을 성장기 6년간 받는다. 그렇게 되면 자연히 누구라도 쓰는 일에 익숙치 않아진다. 또한 의사소통에 있어서 읽기를 제외한 말하기,듣기,쓰기가 현저히 부족한 상태가 된다.\"), \"\\n\", React.createElement(_components.p, null, \"고등학교 때일까, 그런 일기라는 형식을 싸이월드나 다른 플랫폼이 아닌 블로그에 계속해서 기록해 나가고 싶었고 나에게 처음 블로그는 네이버 블로그였다. 그때는 도구의 차이나 컨텐츠의 검색 정도는 그리 중요치 않았다. 그렇지만 시간이 흐르고 많은 글이 쌓이고, 다른 매체들을 활용하면서 네이버라는 플랫폼에 답답함을 느끼기 시작했다. 그래서 네이버를 벗어나고자 티스토리, 브런치, 워드프레스 블로그를 사용해 보았고 그 다음으로 Jekyll을 사용한 Github 블로그에 글을 쓰고 있다. 아, 그리고 파이썬 프레임워크 장고를 이용해 직접 블로그를 한땀 한땀 만들어 보기도 했다.\"), \"\\n\", React.createElement(_components.p, null, \"아래 글에 적혀있는 Jekyll의 개발 블로그로써 강력한 점이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ruby\"\n  }, \"def print_hi(name)\\nputs \\\"Hi, #{name}\\\"\\nend\\nprint_hi('Tom')\\n#=> prints 'Hi, Tom' to STDOUT.\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 코드를 쉽게 IDE상에서 코딩하듯이 highlight할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"네이버에서 code를 가져올 때는 그냥 사진으로 캡쳐를 했고 티스토리, 브런치, 워드프레스에서는 해보지 않았다. 찾아본 결과 티스토리는 그 과정이 복잡하고 브런치는 따로 지원하지는 않는듯 하다. 워드프레스도 플러그인을 사용하면 된다. 최근에 컴퓨터와 더욱 친해지면서 코드로 말하는 일이 잦아졌고, 그에 따라서 코드를 게시하기에 적합한 플랫폼을 찾고 있는 중이었는데, Jekyll이 좋은 대안이 될지 도전해보는 중이다. Jekyll에서 블로그에 글을 쓰고 글쓰기 버튼을 누르는 것이 git commit과 같다는 것은 무척이나 흥미로운 일이다!!\"), \"\\n\", React.createElement(_components.p, null, \"내가 현재 사용하고 있는 다른 블로깅 툴들은 다음과 같다.\\n\", React.createElement(_components.a, {\n    href: \"http://sounghwa777.blog.me/\"\n  }, \"네이버 블로그\"), \"\\n\", React.createElement(_components.a, {\n    href: \"https://brunch.co.kr/@martian\"\n  }, \"브런치\"), \"\\n\", React.createElement(_components.a, {\n    href: \"http://greenhair.pe.hu/\"\n  }, \"워드프레스 블로그\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}