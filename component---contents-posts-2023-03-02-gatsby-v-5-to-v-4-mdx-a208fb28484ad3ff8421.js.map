{"version":3,"file":"component---contents-posts-2023-03-02-gatsby-v-5-to-v-4-mdx-a208fb28484ad3ff8421.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,EAAG,IACHC,IAAK,QACJC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,aAAc,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4BAA6BM,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,iBAAkB,gFAAiF,KAAMK,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,OAAQ,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,uCAAwCM,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,UAAW,sDAAuD,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,YAAaM,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,qDAAsD,OAAQK,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,yCAA0C,4KAA6K,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAMM,EAAAA,cAAoBV,EAAYM,EAAG,CAC1jCK,KAAM,qFACL,UAAW,KAAMD,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,0BAA2B,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,wBAAyBM,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,KAAM,+BAAgC,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,8EAA+EM,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,UAAW,OAAQK,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,kBAAmB,kCAAmC,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,mCAAoC,KAAMM,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,OAAQ,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,4IAA6I,KAAMM,EAAAA,cAAoBV,EAAYO,IAAK,KAAMG,EAAAA,cAAoBV,EAAYK,KAAM,KAAM,6DAA8D,KAAMK,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,kFAAmF,KAAMM,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,OAAQ,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,gQAC9tC,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWd,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCeO,MAAMe,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,CAGA,MAAMQ,EAAc,CAAC,EAQd,SAASC,GAAY,WAACT,EAAU,SAAEU,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfX,EACHA,EAAW,CAAC,GACZA,GAAcQ,EAEJF,EAAiBN,GAG5B,gBACLK,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2023-03-02-gatsby-v5-to-v4.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Migration\"), \"\\n\", React.createElement(_components.p, null, \"Gatsby v4에서 v5로 마이그레이션하면 \", React.createElement(_components.code, null, \"@mdx-js/react\"), \" 라이브러리도 v2로 버전업 해야 한다.\\n이 때 여러 문제가 동시다발적을 터져서 고통받았다. 혹시 같이 겪는 분을 위해 기록을 남긴다.\"), \"\\n\", React.createElement(_components.h2, null, \"문제1\"), \"\\n\", React.createElement(_components.p, null, \"mdx 파일 안에 기존 jekyll 에서 사용하던 문자열 ex. \", React.createElement(_components.code, null, \"{:toc}\"), \" 같은 것들이 포함되어 있었다.\\n그런데 파서는 원인을 찾기 어려운 동일한 에러를 띄웠다.\"), \"\\n\", React.createElement(_components.p, null, \"에러는 계속해서 \", React.createElement(_components.code, null, \"Invalid left-hand side in prefix operation. (1:2)\"), \" 혹은 \", React.createElement(_components.code, null, \"Could not parse expression with acorn\"), \" 과 같은 에러가 발생했다.\\n처음에 나는 mdx 파서가 frontmatter를 읽지 못하는 줄 알았다. 에러가 거의 대부분의 파일에서 발생했기 때문이다.\\n그러나 검색을 하고 mdx 파일을 수정하던 결과 결국 mdx 포맷에 맞지 않는 구문을 사용하면 그냥 최상단에서 에러가 발생하다는 것을 발견했다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://paulie.dev/posts/2022/08/mdx-2-breaking-changes-and-gatsby-plugin-mdx-v4/\"\n  }, \"참조한 글\")), \"\\n\", React.createElement(_components.p, null, \"최종적으로는 위 글에 큰 도움을 받았다.\"), \"\\n\", React.createElement(_components.p, null, \"이 글에서는 jsx 포맷에서 사용되는 \", React.createElement(_components.code, null, \"{\"), \" 대괄호를 그냥 사용하면 안된다는 것을 지적한다.\"), \"\\n\", React.createElement(_components.p, null, \"그래서 mdx 파일을 찬찬히 봤더니 정말로 잘못 사용하고 있었다.\\njekyll에서 사용하던 문서들을 migration해서 썼던 탓에 \", React.createElement(_components.code, null, \"{:toc}\"), \" 혹은 \", React.createElement(_components.code, null, \"{{ site.url }}\"), \"과 같은 구문이 거의 대부분의 문서에 포함되어 있었다.\"), \"\\n\", React.createElement(_components.p, null, \"이것들을 모두 제공했더니 아무 에러 없이 빌드가 되었다.\"), \"\\n\", React.createElement(_components.h2, null, \"문제2\"), \"\\n\", React.createElement(_components.p, null, \"slug가 없어졌다. 기존의 page create는 전적으로 slug에 의존하고 있었기 때문에 바로 에러가 났다.\\n방법을 고민하다, 기존 페이지(SEO)와의 호환성을 위해 페이지별로 수동으로 slug frontmatter 값을 추가해 주었다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"---\\n...\\nslug: '2023-03-02-gatsby-v5-to-v4'\\n...\\n---\\n\")), \"\\n\", React.createElement(_components.p, null, \"위와 같이 모든 파일에 일일히 기존의 파일 이름을 추가했다.\\n추후에 글 쓸 때 약간 번거로울 수 있지만 우선은 기존 포맷으로 가기로 했다.\"), \"\\n\", React.createElement(_components.h2, null, \"마치며\"), \"\\n\", React.createElement(_components.p, null, \"문제 해결을 위해서 eslint 파서가 문제인가? 하면서 babel을 뜯어야 하는걸까? 온갖 고민을 다했다.\\n다행히, 실마리를 찾아서 잘 해결해서 지금은 배포한 상태다. 도구들에 의존하는데, 도구를 잘 알지 못하고 버전업을 하다 보면 이렇게 문제에 부닥친다.\\n덕분에 Gatsby와 조금 더 친해진 기분이 든다. 한번 고통받고 나니 차라리 static page도 nextjs로 마이그레이션 하는 게 나은 게 아닐까? 라는 생각까지 하고 있다. 하하.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","a","pre","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}