{"version":3,"file":"component---contents-posts-2022-07-29-aspect-ratio-mdx-b8330d60b731cf19e639.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBV,EAAMW,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,MAAO,KAAMQ,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,oIAAqI,KAAMO,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,YAAa,KAAMQ,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,mBAAoB,KAAMM,EAAAA,cAAoBX,EAAYM,IAAK,KAAMK,EAAAA,cAAoBX,EAAYO,KAAM,CAC5eK,UAAW,iBACV,6FAA8F,KAAMD,EAAAA,cAAoBX,EAAYM,IAAK,KAAMK,EAAAA,cAAoBX,EAAYO,KAAM,CACtLK,UAAW,gBACV,uFAAwF,KAAMD,EAAAA,cAAoBX,EAAYG,GAAI,KAAM,gBAAiB,KAAMQ,EAAAA,cAAoBX,EAAYM,IAAK,KAAMK,EAAAA,cAAoBX,EAAYO,KAAM,CACjPK,UAAW,iBACV,+BAAkC,KAAMD,EAAAA,cAAoBX,EAAYM,IAAK,KAAMK,EAAAA,cAAoBX,EAAYO,KAAM,CAC1HK,UAAW,gBACV,8EAA+E,KAAMD,EAAAA,cAAoBX,EAAYI,EAAG,KAAM,yCAA0C,KAAMO,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,MAAO,KAAMM,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,SAAU,KAAMM,EAAAA,cAAoBX,EAAYK,GAAI,KAAM,MAAO,KAAMM,EAAAA,cAAoBX,EAAYI,EAAG,KAAMO,EAAAA,cAAoBX,EAAYQ,EAAG,CACnaK,KAAM,2FACL,kBACL,CAKA,UAJA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,MAAsBV,EAAMW,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWhB,EAAOY,EAAAA,cAAoBb,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCMO,MAAMiB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,CAGA,MAAMS,EAAc,CAAC,EAQd,SAASC,GAAY,WAACV,EAAU,SAAEW,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfZ,EACHA,EAAW,CAAC,GACZA,GAAcS,EAEJF,EAAiBP,GAG5B,gBACLM,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2022-07-29-aspect-ratio.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"커머스를 만들 때 가장 중요한 일은 상품 썸네일 이미지를 나열하는 일이다. 그런데 보통은 썸네일을 1:1 혹은 특수한 비율로 쇼핑몰의 컨셉을 잡아서 보여주는데 여태까지 어떻게든 구현을 하면서도 영 아름답지 못하다는 생각을 해왔다.\"), \"\\n\", React.createElement(_components.h2, null, \"이전의 구현방법\"), \"\\n\", React.createElement(_components.h3, null, \"margin-top 이용하기\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<div class='item'>\\n  <div class='dummy'></div>\\n  <div class='title'></title>\\n</div>\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-css\"\n  }, \".item {\\n  position: relative;\\n}\\n.dummy {\\n  margin-top: 100%;\\n}\\n.title {\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"aspect ratio\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<div class=\\\"demo\\\"></div>\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-css\"\n  }, \".demo {\\n  background: black;\\n  width: 500px;\\n  aspect-ratio: 4/3;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"element의 비율을 가로세로 4:3로 지정하겠다는 뜻이다. 대박\"), \"\\n\", React.createElement(_components.h3, null, \"예시\"), \"\\n\", React.createElement(_components.h3, null, \"Usage\"), \"\\n\", React.createElement(_components.h3, null, \"출처\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/1495407/maintain-the-aspect-ratio-of-a-div-with-css\"\n  }, \"stackoverflow\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","h3","pre","code","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}