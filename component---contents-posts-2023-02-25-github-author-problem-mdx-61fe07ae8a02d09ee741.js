"use strict";(self.webpackChunknew_gatsby_blog=self.webpackChunknew_gatsby_blog||[]).push([[147],{3290:function(e,n,t){t.r(n);var l=t(1151),a=t(7294);function r(e){const n=Object.assign({p:"p",strong:"strong",h2:"h2",pre:"pre",code:"code",img:"img",ul:"ul",li:"li",a:"a"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,a.createElement(n.strong,null,"Gihtub에서 author가 잘못된 커밋이 많이 쌓였을 때")),"\n",a.createElement(n.p,null,"회사에서 github에 커밋을 많이 하는데, 어느 순간부턴가 깃헙에 잔디가 찍히지 않는 다는 것을 발견했다. 뭔가 문제겠지 라고 생각하다가 어느 날 호기심이 들어서 찾아봤다."),"\n",a.createElement(n.p,null,"원인은, 쉽게 설명하면 github이 내가 작성한 commit이라는 것을 모른다는 것. ssh 키는 인증이 되어서 그걸로 알아서 나인지 판단한다고 생각했는데 github은 그것을 email과 name으로 판단한다."),"\n",a.createElement(n.p,null,"그러니까 이미 작성된 몇백개의 commit을 다 수정해 주어야 하는 것이었다! 어떡하지..."),"\n",a.createElement(n.p,null,"하지만, 다행히 방법이 있었다."),"\n",a.createElement(n.h2,null,"커밋을 되돌릴 repository로 이동한다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"git log\n")),"\n",a.createElement(n.img,{src:"../images/images/230225_github_author-problem/glg.png",alt:"glg"}),"\n",a.createElement(n.p,null,"를 실행하면 지난 커밋들이 보입니다. 여기서 잘못된 이메일을 찾습니다.\n저의 경우에는 한글자가 앞뒤로 잘못되어 있었습니다."),"\n",a.createElement(n.h2,null,"아래 스크립트를 실행한다."),"\n",a.createElement(n.p,null,"아래 스크립트를 보시면"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,'WRONG_EMAIL="{틀리게작성된@이메일}"')),"\n",a.createElement(n.li,null,a.createElement(n.code,null,'NEW_NAME="{새롭게작성할이름}"')),"\n",a.createElement(n.li,null,a.createElement(n.code,null,'NEW_EMAIL="{새롭게설정한@이메일}"')),"\n"),"\n",a.createElement(n.p,null,"이렇게 세 부분을 직접 작성하셔야 합니다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},'git filter-branch --env-filter \'\nWRONG_EMAIL="{틀리게작성된@이메일}"\nNEW_NAME="{새롭게작성할이름}"\nNEW_EMAIL="{새롭게설정한@이메일}"\n\nif [ "$GIT_COMMITTER_EMAIL" = "$WRONG_EMAIL" ]\nthen\n    export GIT_COMMITTER_NAME="$NEW_NAME"\n    export GIT_COMMITTER_EMAIL="$NEW_EMAIL"\nfi\nif [ "$GIT_AUTHOR_EMAIL" = "$WRONG_EMAIL" ]\nthen\n    export GIT_AUTHOR_NAME="$NEW_NAME"\n    export GIT_AUTHOR_EMAIL="$NEW_EMAIL"\nfi\n\' --tag-name-filter cat -- --branches --tags\n')),"\n",a.createElement(n.p,null,"이 명령어를 사용하면 다음과 같이 결과가 출력됩니다.\n",a.createElement(n.img,{src:"%22../images/images/230225_github_author-problem/overwritten.png%22",alt:"overwritten"})),"\n",a.createElement(n.h2,null,"주의사항"),"\n",a.createElement(n.p,null,"출처의 블로그에서도 나와있지만 위 명령어는 ",a.createElement(n.strong,null,'"매우 주의해서:"')," 사용해야 한다고 합니다. 다른 stack-overflow에서도 권장하지 않는 방법이라는 이야기가 있습니다. 이전 커밋들을 몽땅 수정하는 명령어이기때문에 혹시 push되지 않은 repository라면 미리 clone해 놓거나 작업이 어느정도 일단락되어서 마무리된 상황에서 시도하면 될 것 같습니다.\n(참고로, 커밋되지 않은 변경사항이 있는 경우 명령어가 작동하지 않습니다.)"),"\n",a.createElement(n.p,null,"결과\n",a.createElement(n.img,{src:"%22../images/images/230225_github_author-problem/my-commits.png%22",alt:"my-commits"})),"\n",a.createElement(n.p,null,"덕분에 정말 수백 개의 커밋이 다시 잔디로 바뀌었다 흑흑. 잔디 없을 때는 별 생각 없었는데, 막상 채워지니까 뿌듯하다. 잔디를 더 많이많이 심어야지~"),"\n",a.createElement(n.h2,null,"출처"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://madplay.github.io/post/change-git-author-name"},"https://madplay.github.io/post/change-git-author-name")))}n.default=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)}},1151:function(e,n,t){t.d(n,{Zo:function(){return m},ah:function(){return r}});var l=t(7294);const a=l.createContext({});function r(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const c={};function m({components:e,children:n,disableParentContext:t}){let m;return m=t?"function"==typeof e?e({}):e||c:r(e),l.createElement(a.Provider,{value:m},n)}}}]);
//# sourceMappingURL=component---contents-posts-2023-02-25-github-author-problem-mdx-61fe07ae8a02d09ee741.js.map