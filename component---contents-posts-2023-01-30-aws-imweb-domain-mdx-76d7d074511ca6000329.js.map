{"version":3,"file":"component---contents-posts-2023-01-30-aws-imweb-domain-mdx-76d7d074511ca6000329.js","mappings":"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","sources":["webpack://new-gatsby-blog/./contents/posts/2023-01-30-aws-imweb-domain.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"AWS Route53에서 루트 도메인을 아임웹으로 연결하는 방법을 알아본다.\")), \"\\n\", React.createElement(_components.p, null, \"아임웹에는 도메인 관련 문서가 참 많다. 검색하면 가장 먼저 \", React.createElement(_components.a, {\n    href: \"https://imweb.me/faq?mode=view&category=29&category2=34&idx=71418\"\n  }, \"이 문서\"), \" 가 나온다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만, 나의 경우에는 aws에서 도메인을 관리하고 있고 다른 서비스로 여기저기 보내주어야해서 아임웹의 네임서버를 사용할 수는 없었다. 이 경우에 방법을 찾기가 쉽지 않은데, 설정에 성공해서 앞으로 혹시 어려움을 겪을 나와 다른 누군가를 위해 정리해 보았다.\"), \"\\n\", React.createElement(_components.p, null, \"AWS를 이용하는 경우 \", React.createElement(_components.a, {\n    href: \"https://imweb.me/faq?mode=view&category=29&category2=34&idx=71739\"\n  }, \"바로 이 문서를 참조\"), \"하면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"공식 문서에 덧붙여, 순서대로 작업하는 방법을 알아본다.\"), \"\\n\", React.createElement(_components.p, null, \"(route53에 aws 네임서버가 연결된 상황이다)\"), \"\\n\", React.createElement(_components.h2, null, \"1. 아임웹에 도메인을 등록한다.\"), \"\\n\", React.createElement(_components.p, null, \"아임웹 관리자 - 환경설정 - 도메인 구입 및 설정\"), \"\\n\", React.createElement(_components.p, null, \"에서 [도메인 구입/연결] 버튼을 클릭한다. 그리고 내 도메인을 입력하고 현재 네임서버 즉시 가져오기를 클릭한다.\"), \"\\n\", React.createElement(_components.p, null, \"그러면 네임서버가 확인되고, 이 네임서버를 소유하고 있다는 [인증하기] 버튼 이 나온다.\"), \"\\n\", React.createElement(_components.p, null, \"바로 인증하기를 클릭해 준다.\"), \"\\n\", React.createElement(_components.h2, null, \"2. AWS에 인증용 CNAME 등록하기\"), \"\\n\", React.createElement(_components.p, null, \"위 인증하기 버튼을 누르고 조금(체감상 2-5분정도?) 기다리면 아래와 같은 메세지가 나온다.\"), \"\\n\", React.createElement(_components.p, null, \"도메인 소유 확인을 위한 인증레코드가 발급 되었습니다. 30분 이내로 관리 하시는 네임서버에 인증 레코드를 등록해 주세요.\"), \"\\n\", React.createElement(_components.p, null, \"이제 Route53에 들어가 CNAME 레코드를 추가한다. 값은 레코드 이름, 형식, 내용 형태로 발급된다.\"), \"\\n\", React.createElement(_components.p, null, \"예시)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"레코드 이름 sadfasdfasdfasdf.app.stepping.co.kr. 레코드 형식 CNAME 레코드 내용\\nasdfsadfasdfasdfasdf.asdfasdfasd.acm-validations.aws.\\n\")), \"\\n\", React.createElement(_components.h2, null, \"3. A레코드에 아임웹 랜딩페이지 주소를 연결한다\"), \"\\n\", React.createElement(_components.p, null, \"내 네임서버의 인증이 완료되면 (체감상 5분 정도 걸린다) 인증 완료 메세지와 주소가 나온다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"인증 완료\\n\\n관리 하시는 네임서버에서 아래 도메인으로 CNAME을 이용하여 연결할 수 있습니다. 언제든지 할당된 네임서버로 변경하여 사용할 수도 있습니다.\\n\\n**asdfasdfasdf.cloudfront.net**\\n\")), \"\\n\", React.createElement(_components.h2, null, \"4. 도메인이 잘 연결되었는 지 확인한다.\"), \"\\n\", React.createElement(_components.p, null, \"잘 작동하는 지 확인하면 드디어 끝이다!\"), \"\\n\", React.createElement(_components.h3, null, \"마치며\"), \"\\n\", React.createElement(_components.p, null, \"P.S 만약 무언가 안되는 경우, 아임웹의 문의하기 기능을 적극 활용하자.\"), \"\\n\", React.createElement(_components.p, null, \"P.S2 다음 글에서는 서브도메인을 AWS route53에서 아임웹으로 설정하는 방법을 알아본다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","a","h2","pre","code","h3","_provideComponents","components","React","href","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}