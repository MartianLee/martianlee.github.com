{"version":3,"file":"component---contents-posts-2023-06-01-pg-duplicate-key-voilates-mdx-bbda1dca211a18c6f706.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,MACLC,EAAG,IACHC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBX,EAAMY,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,8GAA+G,KAAMQ,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iCAAkCQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,8DAA+D,yRAA0R,KAAMO,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,mCAAoC,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,eAAgB,KAAMQ,EAAAA,cAAoBZ,EAAYM,IAAK,KAAMM,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,mFAAoF,KAAMO,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYO,EAAG,CACjqCM,KAAM,mEACL,gDAAiD,KAAMD,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,MAAO,KAAMS,EAAAA,cAAoBZ,EAAYQ,GAAI,KAAM,KAAMI,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iBAAkB,KAAMQ,EAAAA,cAAoBZ,EAAYM,IAAK,KAAMM,EAAAA,cAAoBZ,EAAYK,KAAM,CACjWS,UAAW,gBACV,iYAA4Y,KAAMF,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,8DAA+D,MAAO,KAAMQ,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,iCAAkC,gKAAiK,MAAO,KAAMO,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAMQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,+DAAgE,4BAA6B,MAAO,KAAMO,EAAAA,cAAoBZ,EAAYS,GAAI,KAAM,KAAMG,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,wDAAyD,MAAO,MAAO,KAAMQ,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,QAAS,KAAMQ,EAAAA,cAAoBZ,EAAYG,GAAI,KAAM,WAAY,KAAMS,EAAAA,cAAoBZ,EAAYI,EAAG,KAAM,iBAAkBQ,EAAAA,cAAoBZ,EAAYK,KAAM,KAAM,6BAA8B,wHAC/+C,CAKA,UAJA,SAAoBN,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOgB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBX,EAAMY,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWjB,EAAOa,EAAAA,cAAoBd,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCWO,MAAMkB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,CAGA,MAAMS,EAAc,CAAC,EAQd,SAASC,GAAY,WAACV,EAAU,SAAEW,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfZ,EACHA,EAAW,CAAC,GACZA,GAAcS,EAEJF,EAAiBP,GAG5B,gBACLM,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2023-06-01-pg-duplicate-key-voilates.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"postgresql db를 사용 중, backend에서 orm으로 create 명령을 실행할 때 문제가 발생했습니다. 바로 알아채지 못하고 검색이 필요했어서 앞으로 기억하기 위해 정리합니다.\"), \"\\n\", React.createElement(_components.h2, null, \"문제\"), \"\\n\", React.createElement(_components.p, null, \"pg table에 row를 insert 하려고 할 때 \", React.createElement(_components.code, null, \"duplicate key value violates unique constrain PK_324238724\"), \" 에러가 발생합니다.\\n이는 쉽게 이야기하면, 내가 row를 하나 더 생성하려고 할 때, table 이 자동으로 부여하려고 하는 key가 중복된다는 뜻입니다. 다행히 이 문제를 쉽게 유추한 것은 위 테이블의 row를 제가 직접 조작한 적이 있었기 때문에, PK가 중복되는 이유는 내부의 key가 중복될 것이라 판단했기 때문입니다. 구글링을 해본 결과 역시 가장 확률이 높았고 postgresql의 sequence manipulation function을 실행해서 이 문제를 해결할 수 있었습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"Sequence Manipulation Functions\"), \"\\n\", React.createElement(_components.p, null, \"Sequences란?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Sequence objects are special single-row tables created with CREATE SEQUENCE.\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.postgresql.org/docs/current/functions-sequence.html\"\n  }, \"9.17. Sequence Manipulation Functions 공식 문서\")), \"\\n\", React.createElement(_components.h2, null, \"해결\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"key 이름을 찾습니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"\\n-- Sequence and defined type\\nCREATE SEQUENCE IF NOT EXISTS table_id_seq;\\n\\n-- Table Definition\\nCREATE TABLE \\\"public\\\".\\\"table\\\" (\\n    \\\"id\\\" int4 NOT NULL DEFAULT nextval('table_id_seq'::regclass),\\n    \\\"slug\\\" varchar NOT NULL DEFAULT 'noname'::character varying,\\n    \\\"description\\\" text,\\n    \\\"create_datetime\\\" timestamp NOT NULL DEFAULT now(),\\n    PRIMARY KEY (\\\"id\\\")\\n);\\n\")), \"\\n\", React.createElement(_components.p, null, \"이런 식으로 create query를 조회해 보시면 table_id_seq라는 key를 알 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"select lastval() from 테이블 이름;\"), \" 을 실행하면 현재 table에 설정된 key의 값을 알 수 있습니다. 보통 에러가 나는 경우에는 table에 특수한 조작으로 row를 이전에 insert해서 table 내부 table_id_seq값이 max(id)보다 작아서 이미 해당 id의 row가 존재함을 알 수 있습니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"select setval('table_id_seq', (select max(id) from table));\"), \" 쿼리를 실행해 키의 최대값을 재설정합니다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"이후에 아까 실행하려던 insert 쿼리를 생성하면 정상적으로 실행되는 것을 알 수 있습니다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"끝!!!\"), \"\\n\", React.createElement(_components.h2, null, \"앞으로 할 일\"), \"\\n\", React.createElement(_components.p, null, \"그냥 typeorm에서는 \", React.createElement(_components.code, null, \"@PrimaryGeneratedColumn()\"), \" 로 선언한 컬럼이 실제로는 Sequence를 생성한다는 사실을 알았습니다. orm에 너무 의존하다 보니 이렇게 에러를 만나게 되면 해결하기 쉽지 않은데요, 이렇게 만날 때마다 공부해 놓으면 될 것 같습니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","a","ol","li","_provideComponents","components","React","href","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}