{"version":3,"file":"component---contents-posts-2022-03-13-til-css-grid-mdx-bcda24d06da7a24ef55b.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,IAAK,MACLC,KAAM,OACNC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,2BAA4B,KAAMW,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,MAAO,KAAMU,EAAAA,cAAoBd,EAAYK,EAAG,KAAM,6EAA8E,KAAMS,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,MAAO,KAAMU,EAAAA,cAAoBd,EAAYK,EAAG,KAAM,mBAAoB,KAAMS,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,4FAA6F,KAAMO,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,mDAAoD,MAAO,KAAMO,EAAAA,cAAoBd,EAAYQ,IAAK,KAAMM,EAAAA,cAAoBd,EAAYS,KAAM,CAClyBM,UAAW,iBACV,6KAAsL,KAAMD,EAAAA,cAAoBd,EAAYK,EAAG,KAAM,4EAA6E,KAAMS,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,MAAO,KAAMU,EAAAA,cAAoBd,EAAYK,EAAG,KAAM,SAAUS,EAAAA,cAAoBd,EAAYS,KAAM,KAAM,2CAA4C,8DAA+D,KAAMK,EAAAA,cAAoBd,EAAYU,GAAI,KAAM,KAAMI,EAAAA,cAAoBd,EAAYO,GAAI,KAAMO,EAAAA,cAAoBd,EAAYW,EAAG,CAC7rBK,KAAM,gFACL,iBAAkB,MACvB,CAKA,UAJA,SAAoBjB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOkB,QAASC,GAAajB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWnB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCSO,MAAMoB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,CAGA,MAAMS,EAAc,CAAC,EAQd,SAASC,GAAY,WAACV,EAAU,SAAEW,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfZ,EACHA,EAAW,CAAC,GACZA,GAAcS,EAEJF,EAAiBP,GAG5B,gBACLM,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2022-03-13-TIL-css-grid.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"TIL : grid의 다양한 사용법 익히기\"), \"\\n\", React.createElement(_components.h2, null, \"문제\"), \"\\n\", React.createElement(_components.p, null, \"같은 줄에 있는 요소를 하나는 width를 고정시키고 다른 요소는 width가 커져도 그에 따라 늘어나게 하려면 어떻게 해야 할까?\"), \"\\n\", React.createElement(_components.h2, null, \"해결\"), \"\\n\", React.createElement(_components.p, null, \"-> css grid로 해결\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"처음에는 flexbox + min-width로 해결하려고 했다. 하지만 min-width를 설정한 요소가 자꾸 width의 최대값을 벗어나는 문제를 발견했다.\"), \"\\n\", React.createElement(_components.li, null, \"구글링 결과 grid를 사용하면 width의 크기를 지정할 수 있다는 것을 발견했다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-html\"\n  }, \"<div style=\\\"display:grid; grid-template-columns: minmax(0,1fr) 100px;\\\">\\r\\n  <input type=\\\"text\\\" placeholder=\\\"검색\\\" />\\r\\n  <button type=\\\"submit\\\">검색하기</button>\\r\\n</div>\\n\")), \"\\n\", React.createElement(_components.p, null, \"위와 같이 스타일링하면, button의 width가 100px으로 고정되고 width의 변화에 따라 input은 꽉 차게 보인다.\"), \"\\n\", React.createElement(_components.h2, null, \"정리\"), \"\\n\", React.createElement(_components.p, null, \"grid는 \", React.createElement(_components.code, null, \"grid-template-columns: 1fr 1fr 1fr 1fr;\"), \" 정도밖에 이해하지 못하고 있었는데 이번 기회에 더 다양한 layout을 생성할 수 있음을 알게 되었다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.digitalocean.com/community/tutorials/css-css-grid-layout-fr-unit\"\n  }, \"grid fr의 사용법\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","p","ol","li","pre","code","ul","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}