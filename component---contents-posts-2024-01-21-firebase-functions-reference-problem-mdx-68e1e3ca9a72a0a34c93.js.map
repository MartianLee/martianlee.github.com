{"version":3,"file":"component---contents-posts-2024-01-21-firebase-functions-reference-problem-mdx-68e1e3ca9a72a0a34c93.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,MAAO,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,8FAA+F,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,0CAA2C,KAAMK,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,MAAO,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,0GAA2G,KAAMK,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAChnBI,UAAW,gBACV,+dAAge,KAAMD,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,2CAA4C,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,0CAA2C,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,4CAA6C,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,yFAA0F,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,uHAAwH,KAAMK,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,QAAS,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,eAAgB,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,2EAA4E,KAAMK,EAAAA,cAAoBT,EAAYK,IAAK,KAAMI,EAAAA,cAAoBT,EAAYM,KAAM,CAC52CI,UAAW,gBACV,yEAA0E,KAAMD,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,+CAAgD,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,qBAAsB,KAAMK,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,wOAAyO,KAAMK,EAAAA,cAAoBT,EAAYG,GAAI,KAAM,WAAY,KAAMM,EAAAA,cAAoBT,EAAYI,EAAG,KAAM,sIACtnB,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCcO,MAAMc,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,CAGA,MAAMQ,EAAc,CAAC,EAQd,SAASC,GAAY,WAACT,EAAU,SAAEU,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfX,EACHA,EAAW,CAAC,GACZA,GAAcQ,EAEJF,EAAiBN,GAG5B,gBACLK,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2024-01-21-firebase-functions-reference-problem.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"배경\"), \"\\n\", React.createElement(_components.p, null, \"현재 사이드 프로젝트를 Firebase 기반으로 개발하고 있다. Firebase Firestore, Functions, Storage 등등 백엔드를 전부 맡겼다.\"), \"\\n\", React.createElement(_components.p, null, \"그런데, Functions 작성 중 이상한 에러가 발생하기 시작했다.\"), \"\\n\", React.createElement(_components.h2, null, \"문제\"), \"\\n\", React.createElement(_components.p, null, \"다음은 firebase function에서 인벤토리에서 아이템을 장착하면 새롭게 내가 장착한 아이템으로 내 정보를 갱신하는 부분 중 일부의 코드이다. 다음 중 잘못된 내용은 무엇일까?\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"export const EmptyEqquipedItems: EquippedItems = {\\n  [ItemCategory.top]: null,\\n  [ItemCategory.hat]: null,\\n  [ItemCategory.shoes]: null,\\n  [ItemCategory.hand]: null,\\n  [ItemCategory.acc]: null,\\n};\\n\\nconst newEquippedItems: EquippedItems = EmptyEqquipedItems;\\n\\nitemsQuery.forEach((doc) => {\\n  const item: Item = doc.data() as any;\\n  newEquippedItems[item.category] = {\\n    ...item,\\n    id: doc.id,\\n  };\\n});\\nconsole.log('4. equippedItems', newEquippedItems);\\n\")), \"\\n\", React.createElement(_components.p, null, \"코드만 보면은 전혀 문제가 없어 보인다. 하지만 실행했을 때는 달랐다.\"), \"\\n\", React.createElement(_components.p, null, \"한 번 장착한 아이템들이 도무지 없어지지 않았다. 이게 무슨 일이지?\"), \"\\n\", React.createElement(_components.p, null, \"현상 1) 나는 분명 모자 1개를 장착했는데, 아이템이 없어지지 않는다.\"), \"\\n\", React.createElement(_components.p, null, \"현상 2) 아무것도 장착하지 않기(아이템 벗기)를 호출했는데도 여전히 newEquippedItems에는 이전에 내가 장착했던 아이템들이 포함되어 있었다.\"), \"\\n\", React.createElement(_components.p, null, \"비어있어야 할 새로운 변수 newEquippedItems에 값이 있다니, 이상하다. 분명 나는 EmptyEqquipedItems를 할당해 주었는데 여기에 그럼 이전에 입은 아이템이 계속 남아있는 것일까..?\"), \"\\n\", React.createElement(_components.h2, null, \"해결하기\"), \"\\n\", React.createElement(_components.p, null, \"정말 그런 것이었다.\"), \"\\n\", React.createElement(_components.p, null, \"Firebase Function가 어떤 인스턴스에서 실행되는 지는 자세히는 모르겠지만 그런 것이었다. 그래서 위 코드 중 일부를\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-tsx\"\n  }, \"const newEquippedItems: EquippedItems = { ...EmptyEqquipedItems };\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게, 같은 객체가 아니고 완전히 새로운 객체 형태로 구조분해할당해 주었다.\"), \"\\n\", React.createElement(_components.p, null, \"그러니까 귀신같이 문제가 해결.\"), \"\\n\", React.createElement(_components.p, null, \"EmptyEqquipedItems 객체의 경우 models.ts 파일에 별도로 선언되어 있었는데, 이 객체는 객체일 뿐, 무언가 할당되어 있을 것이라고는 상상도 못했다. 아마 한 번 빌드된 function이 메모리에 머물러 있고 계속해서 같은 EmptyEqquipedItems 객체가 호출되어 갱신되어서 그런 것 같다. 이름만 EmptyEqquipedItems 이고 바보같이 자꾸 업데이트 하고 있던 셈이다.\"), \"\\n\", React.createElement(_components.h2, null, \"앞으로 할 일\"), \"\\n\", React.createElement(_components.p, null, \"server side에서 이렇게 나이브하게 코드를 작성하면 전혀 예상치 못한 일이 일어날 수 있다는 것을 깨달았다. 다음부터는 객체 참조 문제를 조심하도록!! (다행인 것은 에러가 나는 로직이 길지 않아 빠르게 디버깅해낼 수 있었다)\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","_provideComponents","components","React","className","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}