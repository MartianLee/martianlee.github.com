{"version":3,"file":"component---contents-posts-2019-03-30-spring-tutorial-mdx-319f094d53523cef4d7a.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,0NAA2N,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,kCAAmCM,EAAAA,cAAoBT,EAAYI,EAAG,CACxaM,KAAM,mDACL,mBAAoB,2FAA4F,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8EAA+E,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,gBAAiB,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,yDAA0DM,EAAAA,cAAoBT,EAAYI,EAAG,CAC5bM,KAAM,4DACL,MAAO,cAAe,KAAMD,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,6CAA8C,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYM,KAAM,KAAM,8BAA+B,OAAQ,KAAMG,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,wEAAyE,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,6CAA8C,KAAMM,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,gDAAiD,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,8CAA+C,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uDAAwD,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,4CAA6C,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,sPAAuP,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,oDAAqD,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+BAAgC,KAAMM,EAAAA,cAAoBT,EAAYK,GAAI,KAAM,iBAAkB,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,8EAC/5C,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOY,QAASC,GAAaX,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWb,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCcO,MAAMc,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,CAGA,MAAMQ,EAAc,CAAC,EAQd,SAASC,GAAY,WAACT,EAAU,SAAEU,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfX,EACHA,EAAW,CAAC,GACZA,GAAcQ,EAEJF,EAAiBN,GAG5B,gBACLK,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2019-03-30-spring-tutorial.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"이직을 위해서 수많은 회사들의 잡 디스크립션을 읽어보다 보니 조금 큰 회사의 서버는 거의 대부분이 'Spring Framework 경험자'가 우대사항이었습니다. 군생활 때 잠시 다루고 잊었던 Spring을 결국 이렇게 다시 만나다니.. 흑. 스프링의 큰 개념인 AOP, DI 등을 보기에는 면접이 하루이틀 하는 상황이라서 재빠르게 게시판 정도 만들어보자! 라는 마음으로 시작했습니다.\"), \"\\n\", React.createElement(_components.p, null, \"여러 튜토리얼이 있는데, 시간이 조금 지났지만 유명하신 \", React.createElement(_components.a, {\n    href: \"https://jojoldu.tistory.com/251?category=635883\"\n  }, \"jojoldu 님의 튜토리얼\"), \"을 보고 진행해 보았습니다. 스프링 부트를 쓰는 것을 넘어서 실제로 서비스를 배포해볼 수 있는 튜토리얼입니다. 따라 하다가 막히던 부분을 정리해 보았습니다.\"), \"\\n\", React.createElement(_components.p, null, \"IDE는 STS를 사용하다가 튜토리얼을 따라하는 중간에 Visual Studio Code로 갈아탔습니다(..) 감안하시구 읽어주세요.\"), \"\\n\", React.createElement(_components.h3, null, \"Lombok 사용 에러\"), \"\\n\", React.createElement(_components.p, null, \"STS에서 Enable Annotation build 가 체크 안되어있을 때 나는 에러입니다.\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/spring-projects/spring-ide/issues/273\"\n  }, \"이곳\"), \"을 참조하였습니다.\"), \"\\n\", React.createElement(_components.h3, null, \"에러 : access = AccessLevel.PROTECTED 에 빨간줄\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"import lombok.AccessLevel;\"), \" 함.\"), \"\\n\", React.createElement(_components.h3, null, \"java.lang.NoClassDefFoundError: org/junit/runner/manipulation/Filter\"), \"\\n\", React.createElement(_components.p, null, \"JUnit이 없다는 에러입니다. 환경설정에서 라이브러리를 추가하면 됩니다.\"), \"\\n\", React.createElement(_components.p, null, \"Properties - Libraries - add Library - JUnit\"), \"\\n\", React.createElement(_components.h3, null, \"http://localhost:8080/h2-console 접속했을 때 문제\"), \"\\n\", React.createElement(_components.p, null, \"Jdbc url을 기본 url 에서 jdbc:h2:mem:testdb 으로 바꿔주어야 한다.\"), \"\\n\", React.createElement(_components.h3, null, \"LocalDate 사용 에서 Dependency 설정 변경하지 않은 문제\"), \"\\n\", React.createElement(_components.p, null, \"스프링 2부터는 기본적으로 Spring boot 2.0은 Hibernate 5.2.16을 지원하고 있으며 (현재 이글을 쓰고 있을 때 최신버전은 Spring boot 2.0.1) Hibernate 5.2은 JPA2.1을 디펜더시 받고 있으며 2.1을 지원하고 있다. 그렇지만 Hibernate 5.2는 JPA2.2 도 일부 지원하고 있다. JPA2.2 에서는 JSR-310 스펙인 Date and Time API를 지원한다고 합니다.\"), \"\\n\", React.createElement(_components.h3, null, \"Test code를 test 폴더가 아니고 main 폴더에 만들어서 계속 에러가 났다.\"), \"\\n\", React.createElement(_components.p, null, \"Test code는 꼭 test 폴더에 만듭시다.\"), \"\\n\", React.createElement(_components.h3, null, \"BaseEntity 개념\"), \"\\n\", React.createElement(_components.p, null, \"Rails에서는 ActiveRecord를 상속받기만 하면 되는데 스프링은 내가 필요한 BaseEntity를 만들어서 상속해야 합니다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h3","code","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}