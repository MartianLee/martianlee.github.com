{"version":3,"file":"component---contents-posts-2017-04-28-django-template-for-loop-mdx-6fe848d109bd55ee5a0f.js","mappings":"uJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,IAAK,MACLC,KAAM,OACNC,EAAG,MACFC,EAAAA,EAAAA,MAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,sMAAuM,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,CACtXK,UAAW,mBACV,2LAA4L,KAAMD,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYM,EAAG,CAC/QK,KAAM,mFACL,qBAAsB,UAAW,KAAMF,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,uBAAwB,KAAMM,EAAAA,cAAoBT,EAAYI,IAAK,KAAMK,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,uKAA0K,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAMM,EAAAA,cAAoBT,EAAYM,EAAG,CAClcK,KAAM,0FACL,kBAAmB,UAAW,KAAMF,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,6DAClF,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOK,EAAYJ,EAAAA,cAAoBI,EAAWd,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCYO,MAAMe,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBP,GAC/B,MAAMQ,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfN,EACFA,EAAWQ,GAGb,IAAIA,KAAsBR,IAChC,CAACQ,EAAmBR,GACzB,CAGA,MAAMS,EAAc,CAAC,EAQd,SAASC,GAAY,WAACV,EAAU,SAAEW,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfZ,EACHA,EAAW,CAAC,GACZA,GAAcS,EAEJF,EAAiBP,GAG5B,gBACLM,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://new-gatsby-blog/./contents/posts/2017-04-28-django-template-for-loop.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"장고에서 우리가 흔히 알고 있는 빙고게임과 같은 기능을 구현하려고 하였다.\\n그렇게 하려면 게임판의 사이즈를 알고 그 사이즈*사이즈 만큼의 HTML table을 그려야 하는데, 기존에 내가 알고 있던 장고Django 템플릿Template의 for loop는 그저 주어진 객체의 갯수만큼 자동으로 반복되는 수 밖에 없었다. 그래서 찾아 보았더니...\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-django\"\n  }, \"...\\nrender_to_response('foo.html', \\\\{..., 'range': range(10), ...\\\\}, ...)\\n...\\nand in the template:\\n\\n\\\\{% for i in range %\\\\}\\n...\\n\\\\{% endfor %\\\\}\\n\\n\\\\{% endhighlight %\\\\}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"http://stackoverflow.com/questions/1107737/numeric-for-loop-in-django-templates\"\n  }, \"view에서 값을 넘겨주는 방법\"), \"이 있었다.\"), \"\\n\", React.createElement(_components.p, null, \"혹은 정말 상수번 반복하고 싶으면,\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"\\\\{% highlight html+django %\\\\}\\n\\n\\\\{% for i in \\\"1234567\\\" %\\\\}\\n<option value=\\\\{\\\\{i\\\\}\\\\}> \\\\{\\\\{i\\\\}\\\\}</option>\\n\\\\{% endfor %\\\\}\\n\\n\\\\{% endhighlight %\\\\}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"http://stackoverflow.com/questions/5242866/how-to-loop-7-times-in-the-django-templates\"\n  }, \"1234567을 쓰는 방법\"), \"이 있었다.\"), \"\\n\", React.createElement(_components.p, null, \"실제로 반복문으로 만든 페이지!!\\n![bingo]({{ site.images }}/bingo.jpg)\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","pre","code","a","_provideComponents","components","React","className","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}