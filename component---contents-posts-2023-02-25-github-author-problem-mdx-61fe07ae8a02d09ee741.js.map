{"version":3,"file":"component---contents-posts-2023-02-25-github-author-problem-mdx-61fe07ae8a02d09ee741.js","mappings":"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","sources":["webpack://new-gatsby-blog/./contents/posts/2023-02-25-github-author-problem.mdx","webpack://new-gatsby-blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Gihtub에서 author가 잘못된 커밋이 많이 쌓였을 때\")), \"\\n\", React.createElement(_components.p, null, \"회사에서 github에 커밋을 많이 하는데, 어느 순간부턴가 깃헙에 잔디가 찍히지 않는 다는 것을 발견했다. 뭔가 문제겠지 라고 생각하다가 어느 날 호기심이 들어서 찾아봤다.\"), \"\\n\", React.createElement(_components.p, null, \"원인은, 쉽게 설명하면 github이 내가 작성한 commit이라는 것을 모른다는 것. ssh 키는 인증이 되어서 그걸로 알아서 나인지 판단한다고 생각했는데 github은 그것을 email과 name으로 판단한다.\"), \"\\n\", React.createElement(_components.p, null, \"그러니까 이미 작성된 몇백개의 commit을 다 수정해 주어야 하는 것이었다! 어떡하지...\"), \"\\n\", React.createElement(_components.p, null, \"하지만, 다행히 방법이 있었다.\"), \"\\n\", React.createElement(_components.h2, null, \"커밋을 되돌릴 repository로 이동한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"git log\\n\")), \"\\n\", React.createElement(_components.img, {\n    src: \"../images/images/230225_github_author-problem/glg.png\",\n    alt: \"glg\"\n  }), \"\\n\", React.createElement(_components.p, null, \"를 실행하면 지난 커밋들이 보입니다. 여기서 잘못된 이메일을 찾습니다.\\n저의 경우에는 한글자가 앞뒤로 잘못되어 있었습니다.\"), \"\\n\", React.createElement(_components.h2, null, \"아래 스크립트를 실행한다.\"), \"\\n\", React.createElement(_components.p, null, \"아래 스크립트를 보시면\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"WRONG_EMAIL=\\\"{틀리게작성된@이메일}\\\"\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"NEW_NAME=\\\"{새롭게작성할이름}\\\"\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"NEW_EMAIL=\\\"{새롭게설정한@이메일}\\\"\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 세 부분을 직접 작성하셔야 합니다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-bash\"\n  }, \"git filter-branch --env-filter '\\nWRONG_EMAIL=\\\"{틀리게작성된@이메일}\\\"\\nNEW_NAME=\\\"{새롭게작성할이름}\\\"\\nNEW_EMAIL=\\\"{새롭게설정한@이메일}\\\"\\n\\nif [ \\\"$GIT_COMMITTER_EMAIL\\\" = \\\"$WRONG_EMAIL\\\" ]\\nthen\\n    export GIT_COMMITTER_NAME=\\\"$NEW_NAME\\\"\\n    export GIT_COMMITTER_EMAIL=\\\"$NEW_EMAIL\\\"\\nfi\\nif [ \\\"$GIT_AUTHOR_EMAIL\\\" = \\\"$WRONG_EMAIL\\\" ]\\nthen\\n    export GIT_AUTHOR_NAME=\\\"$NEW_NAME\\\"\\n    export GIT_AUTHOR_EMAIL=\\\"$NEW_EMAIL\\\"\\nfi\\n' --tag-name-filter cat -- --branches --tags\\n\")), \"\\n\", React.createElement(_components.p, null, \"이 명령어를 사용하면 다음과 같이 결과가 출력됩니다.\\n\", React.createElement(_components.img, {\n    src: \"%22../images/images/230225_github_author-problem/overwritten.png%22\",\n    alt: \"overwritten\"\n  })), \"\\n\", React.createElement(_components.h2, null, \"주의사항\"), \"\\n\", React.createElement(_components.p, null, \"출처의 블로그에서도 나와있지만 위 명령어는 \", React.createElement(_components.strong, null, \"\\\"매우 주의해서:\\\"\"), \" 사용해야 한다고 합니다. 다른 stack-overflow에서도 권장하지 않는 방법이라는 이야기가 있습니다. 이전 커밋들을 몽땅 수정하는 명령어이기때문에 혹시 push되지 않은 repository라면 미리 clone해 놓거나 작업이 어느정도 일단락되어서 마무리된 상황에서 시도하면 될 것 같습니다.\\n(참고로, 커밋되지 않은 변경사항이 있는 경우 명령어가 작동하지 않습니다.)\"), \"\\n\", React.createElement(_components.p, null, \"결과\\n\", React.createElement(_components.img, {\n    src: \"%22../images/images/230225_github_author-problem/my-commits.png%22\",\n    alt: \"my-commits\"\n  })), \"\\n\", React.createElement(_components.p, null, \"덕분에 정말 수백 개의 커밋이 다시 잔디로 바뀌었다 흑흑. 잔디 없을 때는 별 생각 없었는데, 막상 채워지니까 뿌듯하다. 잔디를 더 많이많이 심어야지~\"), \"\\n\", React.createElement(_components.h2, null, \"출처\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://madplay.github.io/post/change-git-author-name\"\n  }, \"https://madplay.github.io/post/change-git-author-name\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h2","pre","code","img","ul","li","a","_provideComponents","components","React","className","src","alt","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}